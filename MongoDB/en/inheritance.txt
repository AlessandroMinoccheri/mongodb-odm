Doctrine currently offers two supported methods of inheritance which are 
Single Collection Inheritance and Collection Per Class Inheritance.

### Single Collection Inheritance

In Single Collection Inheritance each document is stored in a single collection
where a discriminator field is used to distinguish one document type from another.

Simple example:

    [php]
    namespace Documents;

    /**
     * @Document
     * @InheritanceType("SINGLE_COLLECTION")
     * @DiscriminatorField(fieldName="type")
     * @DiscriminatorMap({"person"="Person", "employee"="Employee"})
     */
    class Person
    {
        // ...
    }

    /**
     * @Document
     */
    class Employee extends Person
    {
        // ...
    }

The discriminator field value allows Doctrine to know what type of class to return by
looking it up in the discriminator map. Now if we ask for a certain Person and it
has a discriminator field value of employee, we would get an Employee instance back:

    [php]
    $employee = new Empoyee();
    // ...
    $dm->persist($employee);
    $dm->flush();

    $employee = $dm->find('Person', $employee->getId()); // instanceof Employee

Even though we queried Person, Doctrine will know to return an Employee instance because
of the discriminator map!

### Collection Per Class Inheritance

With Collection Per Class Inheritance each document is stored in its own collection
and contains all inherited fields:

    [php]
    namespace Documents;
    
    /**
     * @Document
     * @InheritanceType("COLLECTION_PER_CLASS")
     * @DiscriminatorMap({"person"="Person", "employee"="Employee"})
     */
    class Person
    {
        // ...
    }

    /**
     * @Document
     */
    class Employee extends Person
    {
        // ...
    }

In this type of inheritance a discriminator is not needed since the data is separated
in different collections!