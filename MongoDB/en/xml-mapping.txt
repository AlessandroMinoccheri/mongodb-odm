The XML mapping driver enables you to provide the ODM metadata in form of XML documents.

The XML driver is backed by an XML Schema document that describes the structure of a mapping document. The most recent version of the XML Schema document is available online at [http://doctrine-project.org/schemas/odm/doctrine-mongo-mapping.xsd](http://doctrine-project.org/schemas/odm/doctrine-mongo-mapping). The most convenient way to work with XML mapping files is to use an IDE/editor that can provide code-completion based on such an XML Schema document. The following is an outline of a XML mapping document with the proper xmlns/xsi setup for the latest code in trunk.

    [xml]
    <doctrine-mapping xmlns="http://doctrine-project.org/schemas/odm/doctrine-mongo-mapping"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://doctrine-project.org/schemas/odm/doctrine-mongo-mapping
                        http://doctrine-project.org/schemas/odm/doctrine-mongo-mapping.xsd">
    
        ...
    
    </doctrine-mapping>
    
The XML mapping document of a class is loaded on-demand the first time it is requested and subsequently stored in the metadata cache. In order to work, this requires certain conventions:

 * Each document/mapped superclass must get its own dedicated XML mapping document.
 * The name of the mapping document must consist of the fully qualified name of the class, where namespace separators are replaced by dots (.).
 * All mapping documents should get the extension ".dcm.xml" to identify it as a Doctrine mapping file. This is more of a convention and you are not forced to do this. You can change the file extension easily enough.
 
-

    [php]
    $driver->setFileExtension('.xml');

It is recommended to put all XML mapping documents in a single folder but you can spread the documents over several folders if you want to. In order to tell the XmlDriver where to look for your mapping documents, supply an array of paths as the first argument of the constructor, like this:

    [php]
    // $config instanceof Doctrine\ORM\Configuration
    $driver = new XmlDriver(array('/path/to/files'));
    $config->setMetadataDriverImpl($driver);


++ Example

As a quick start, here is a small example document that makes use of several common elements:

    [xml]
    // Documents.User.dcm.xml
    <?xml version="1.0" encoding="UTF-8"?>

    <doctrine-mapping xmlns="http://doctrine-project.org/schemas/orm/doctrine-mapping"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://doctrine-project.org/schemas/orm/doctrine-mapping
                        http://doctrine-project.org/schemas/orm/doctrine-mapping.xsd">

        <document name="Documents\User" db="documents" collection="users">
            <field name="id" id="true" />
            <field name="username" type="string" />
            <field name="createdAt" type="date" />
            <field name="address" targetDocument="Documents\Address" embedded="true" type="one" />
            <field name="profile" targetDocument="Documents\Profile" reference="true" type="one" cascade="all" />
            <field name="phonenumbers" targetDocument="Documents\Phonenumber" embedded="true" type="many" />
            <field name="group" targetDocument="Documents\Group" reference="true" type="many" cascade="all" />
            <field name="account" targetDocument="Documents\Account" reference="true" type="one" cascade="all" />
        </document>
    </doctrine-mapping>

 Be aware that class-names specified in the XML files should be fully qualified.