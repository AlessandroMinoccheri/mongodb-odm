You can query MongoDB by creating and building a new query with the `createQuery()`
method or you can use the traditional find() and findOne() methods directly. Below
you will find several examples of how to utilize the Query API.

## Examples

Here is an example where we use the `createQuery()` method to create and build a new query:

    [php]
    $query = $dm->createQuery('User')
        ->where('username', 'jwage');

    $user = $query->getSingleResult();

The where functionality can search within embedded documents properties:

    [php]
    $query = $dm->createQuery('User')
        ->where('profile.lastName', 'Wage');

    $users = $query->execute();

You can limit which fields are selected with the select() method. Here we only
select the username:

    [php]
    $query = $dm->createQuery('User')
        ->select('username');
    
    $users = $query->execute();

If you want to just find an document by its identifier you can use the find()
method:

    [php]
    $user = $dm->find('User', 'the_string_id');

The references for a document are lazily loaded via proxy and collection classes.

    [php]
    $profile = $user->getProfile(); // proxy and no query to database has been made yet

    echo $profile->getName(); // queries the database and lazily loads the document

It works the same way for a collection of references. It will lazily fetch the
collection with one query initializing all proxies in the collection.

## API

The Query object offers you a fluent interface for constructing query objects that
define the data you wish to query for. Below describes all the available methods
you can use.

**createQuery(string $className = null)**

You can start by creating a new Query object:

    [php]
    $query = $dm->createQuery('User');

You can pass the `createQuery()` method a class name or you can set it later
with the `from()` method:

**from(string $className)**

    [php]
    $query = $dm->createQuery()
        ->from('Documents\User');

**select(string $fieldName)**

    [php]
    $query->select('username');

You can add multiple select fields by simply specifying multiple arguments:

    [php]
    $query->select('email', 'username');

**addSelect(string $fieldName)**

    [php]
    $query->addSelect('username');

**where(string $fieldName, string $value)**

    [php]
    $query->where('username', 'jwage');

If you want to select by a documents ID it is not necessary to pass a MongoId 
object instance, one will be created for you from the passed string:

    [php]
    $query->where('id', 'the_id');

**addWhere(string $fieldName, string $value)**

    [php]
    $query->addWhere('username', 'jwage');

**whereAll(string $fieldName, mixed $values)**

Query for documents where user is in all the specified Groups:

    [php]
    $query->whereAll('groups', array('Group 1', 'Group 2'));

[http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24all](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24all)

**whereExists(string $fieldName, boolean $bool)**

Query for documents where user does not have the email address field:

    [php]
    $query->whereExists('email', false);

[http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24exists](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24exists)

**whereIn(string $fieldName, array $values)**

Query where `type` is in the given array of values:

    [php]
    $query->whereIn('type', array('Normal', 'Moderator'));

[http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24in](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24in)

**whereNotIn(string $fieldName, array $values)**

Query where `type` is not in the given array of values:

    [php]
    $query->whereNotIn('type', array('Administrator'));

[http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24nin](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24nin)

**whereGt(string $fieldName, string $value)**

Query where `amount_due` is greater than 30.00:

    [php]
    $query->whereGt('amount_due', 30.00);

[http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperators%3A%3C%2C%3C%3D%2C%3E%2C%3E%3D](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperators%3A%3C%2C%3C%3D%2C%3E%2C%3E%3D)

**whereGte(string $fieldName, string $value)**

Query where `amount_due` is greater than or equal to 30.00:

    [php]
    $query->whereGte('amount_due', 30.00);

[http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperators%3A%3C%2C%3C%3D%2C%3E%2C%3E%3D](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperators%3A%3C%2C%3C%3D%2C%3E%2C%3E%3D)

**whereLt(string $fieldName, string $value)**

Query where `amount_due` is less than 30.00:

    [php]
    $query->whereLt('amount_due', 30.00);

[http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperators%3A%3C%2C%3C%3D%2C%3E%2C%3E%3D](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperators%3A%3C%2C%3C%3D%2C%3E%2C%3E%3D)

**whereLte(string $fieldName, string $value)**

Query where `amount_due` is less than or equal to 30.00:

    [php]
    $query->whereLte('amount_due', 30.00);

[http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperators%3A%3C%2C%3C%3D%2C%3E%2C%3E%3D](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperators%3A%3C%2C%3C%3D%2C%3E%2C%3E%3D)

**whereMod(string $fieldName, array $mod)**

    [php]
    $query->whereMod('a', array(10, 1));

[http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24mod](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24mod)

**whereNotEqual(string $fieldName, string $value)**

    [php]
    $query->whereNotEqual('type', 'Administrator');

[http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24ne](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24ne)

**whereRange(string $fieldName, string $start, string $end)**

    [php]
    $query->whereRange('amount_due', 30, 100);

[http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperators%3A%3C%2C%3C%3D%2C%3E%2C%3E%3D](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperators%3A%3C%2C%3C%3D%2C%3E%2C%3E%3D)

**whereSize(string $fieldName, string $size)**

    [php]
    $query->whereSize('a', 1);

[http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24size](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24size)

**whereType(string $fieldName, string $type)**

    [php]
    $query->whereType('username', 2);

[http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24type](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24type)

**sort(string $fieldName, string $order)**

    [php]
    $query->sort('username', 'desc');

> **NOTE**
> Doctrine allows you to use the string desc or asc for the order to sort and is
> converted to -1 and 1 for you which is what MongoDB expects to receive.

[http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-{{sort%28%29}}](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-{{sort%28%29}})

**addSort(string $fieldName, string $order)**

You can add additional sort requirements with the `addSort()` method:

    [php]
    $query->addSort('username', 'desc');

[http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-{{sort%28%29}}](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-{{sort%28%29}})

**count(bool $all)**

Count the number of documents the query will return:

    [php]
    echo $query->count();

Or optionally specify an argument of true to return the count of all the documents
the query would return without any limit:

    [php]
    echo $query->count(true); // all

[http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-{{count%28%29}}](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-{{count%28%29}})

**limit(string $limit)**

    [php]
    $query->limit(30);

[http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-{{limit%28%29}}](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-{{limit%28%29}})

**skip(string $skip)**

Like setting an offset with MySQL:

    [php]
    $query->skip(90);

[http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-{{skip%28%29}}](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-{{skip%28%29}})

**execute()**

Execute the query and return an array of results:

    [php]
    $users = $query->execute();

**getSingleResult()**

Execute the query and return a single result:

    [php]
    $user = $query->getSingleResult();

**iterate()**

Iterate over the cursor hydrating one document at a time:

    [php]
    foreach ($query->iterate() as $user) {
        
    }