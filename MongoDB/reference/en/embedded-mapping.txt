This chapter explains how embedded documents are mapped in Doctrine.

++ Embed One

Embed a single document:

    [php]
    /** @Document */
    class User
    {
        // ...

        /** @EmbedOne(targetDocument="Address") */
        private $address;

        // ...
    }

    /** @EmbeddedDocument */
    class Address
    {
        // ...
    }

++ Embed Many

Embed many documents:

    [php]
    /** @Document */
    class User
    {
        // ...

        /** @EmbedMany(targetDocument="Phonenumber") */
        private $phonenumbers = array();

        // ...
    }

    /** @EmbeddedDocument */
    class Phonenumber
    {
        // ...
    }

++ Mixing Document Types

If you want to store different types of documents in an embedded document you can simply
omit the `targetDocument` option:

    [php]
    /** @Document */
    class User
    {
        // ..

        /** @EmbedMany */
        private $tasks = array();

        // ...
    }

Now the `$tasks` property can store any type of document! The class name will be
automatically added for you in a field named `_doctrine_class_name`.

You can also specify a discriminator map to avoid storing the fully qualified class name 
with each embedded document:

    [php]
    /** @Document */
    class User
    {
        // ..

        /**
         * @EmbedMany(
         *   discriminatorMap={
         *     "download"="DownloadTask",
         *     "build"="BuildTask"
         *   }
         * )
         */
        private $tasks = array();

        // ...
    }

You can have different task classes that can be embedded:

    [php]
    /** @EmbeddedDocument */
    class DownloadTask
    {
        // ...
    }

    /** @EmbeddedDocument */
    class BuildTask
    {
        // ...
    }

If you want to store the discriminator value in a field other than `_doctrine_class_name`
you can use the `discriminatorField` option:

    [php]
    /** @Document */
    class User
    {
        // ..

        /**
         * @EmbedMany(discriminatorField="type")
         */
        private $tasks = array();

        // ...
    }

++ Cascading Operations

By default Doctrine will not cascade any `UnitOfWork` operations to embedded documents so if
wish to have this functionality you must explicitly enable it:

    [php]
    /** @EmbedMany(targetDocument="Phonenumber", cascade={"all"}) */
    private $phonenumbers = array();

The valid values are:

 * **all** - cascade on all operations by default.
 * **callbacks** - cascade to embedded documents and execute lifecycle callbacks on them.
 * **merge** - cascade merge operation to referenced documents.
 * **refresh** - cascade refresh operation to referenced documents.
 * **persist** - cascade persist operation to referenced documents.