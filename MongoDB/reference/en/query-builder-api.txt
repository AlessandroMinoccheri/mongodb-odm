Querying for documents with Doctrine is just as simple as if you weren't using 
Doctrine at all. Of course you always have your traditional `find()` and `findOne()`
methods but you also have a `Query` object with a fluent API for defining the
query that should be executed.

The `Query` object supports four types of queries:

* [find](#find)
* [update](#update)
* [remove](#remove)
* [group](#group)

This section will show examples for the different types of queries.

++ Finding Documents

You can use the traditional `find()` and `findOne()` methods to find documents
just like you would if you weren't using Doctrine. The only difference is that the
methods return objects instead of arrays:

    [php]
    $users = $dm->find('User', array('type' => 'admin'));

And you can use the `findOne()` method to find a single user:

    [php]
    $user = $dm->findOne('User', array('username' => 'jwage'));

++ Creating Query Objects

You can easily create a new `Query` object with the `DocumentManager::createQuery()`
method:

    [php]
    $query = $dm->createQuery('User');

The first and only argument is optional, you can specify it later with the `from()`
method:

    [php]
    $query = $dm->createQuery();
    
    // ...
    
    $query->from('User');

++ Find Queries

<a name="find"></a>

Find queries are the default type of query and are how you retrieve data from Mongo
either as PHP objects or the raw arrays the PHP Mongo extension returns.

+++ Executing Queries

You can execute a query with the `execute()` method which executes the query,
iterators the cursor and returns an array of results:

    [php]
    $query = $dm->createQuery('User');
    $users = $query->execute();

+++ Getting Single Result

If you want to just get a single result you can use the `Query#getSingleResult()`
method:

    [php]
    $user = $dm->createQuery('User')
        ->field('username')->equals('jwage')
        ->getSingleResults();

+++ Getting Query Cursor

If you wish to get the cursor to iterate over the results instead of returning
everything as an array you can use the `getCursor()` method:

    [php]
    $cursor = $query->getCursor();

    foreach ($cursor as $document) {
        // ...
    }

The advantage of iterating over the cursor is that all results are not hydrated 
into memory and stored in an array so the overall memory footprint is lower.

+++ Selecting Fields

You can limit the fields that are returned in the results by using the `select()`
method:

    [php]
    $query = $dm->createQuery('User')
        ->select('username', 'password');
    $users = $query->execute();

In the results only the data from the username and password will be returned.

+++ Disabling Hydration

For find queries the results by default are hydrated and you get document objects
back instead of arrays. You can disable this and get the raw results directly back
from mongo by using the `hydrate(false)` method:

    [php]
    $users = $dm->createQuery('User')
        ->hydrate(false)
        ->execute();
    print_r($users);

+++ Limiting Results

You can limit results similar to how you would in MySQL with a limit and offset
by using the `limit()` and `skip()` method.

Here is an example where we get the third page of blog posts when we show twenty
at a time:

    [php]
    $blogPosts = $dm->createQuery('BlogPost')
        ->limit(20)
        ->skip(40)
        ->execute();

+++ Sorting Results

You can sort the results similar to how you would in MySQL with an ORDER BY command
by using the `sort()` method:

    [php]
    $query = $dm->createQuery('Article')
        ->sort('createdAt', 'desc');

If you want to an additional sort you can call `sort()` again:

    [php]
    $query->sort('featured', 'desc');

+++ Map Reduce

You can also run map reduced find queries using the `Query` object:

    [php]
    $query = $this->dm->createQuery('Event')
        ->field('type')->equals('sale')
        ->map('function() { emit(this.userId, 1); }')
        ->reduce("function(k, vals) {
            var sum = 0;
            for (var i in vals) {
                sum += vals[i]; 
            }
            return sum;
        }");
    $results = $query->execute();

> **NOTE**
> When you specify a `map()` and `reduce()` operation the results will not be
> hydrated and the raw results from the map reduce operation will be returned.

If you just want to reduce the results using a javascript function you can just
call the `where()` method:

    [php]
    $query = $this->dm->createQuery('User')
        ->where("function() { return this.type == 'admin'; }");

You can read more about the [$where operator](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-JavascriptExpressionsand%7B%7B%24where%7D%7D) in the Mongo docs.

++ Conditional Operators

The conditional operators in Mongo are available to limit the returned results
through a easy to use API. Doctrine abstracts this to a fluent object oriented
interface with a fluent API.

Here is a list of all the conditional operation methods you can use on the `Query`
object. Click the method to see a practical example:

* [where($javascript)](#where)
* [in($values)](#in)
* [notIn($values)](#notIn)
* [notEqual($value)](#notEqual)
* [greaterThan($value)](#greaterThan)
* [greaterThanOrEq($value)](#greaterThanOrEq)
* [lessThan($value)](#lessThan)
* [lessThanOrEq($value)](#lessThanOrEq)
* [range($start, $end)](#range)
* [size($size)](#size)
* [exists($bool)](#exists)
* [type($type)](#type)
* [all($values)](#all)
* [mod($mod)](#mod)

<a name="where"></a>

Query for active administrator users:

    [php]
    $query = $dm->createQuery('User')
        ->field('type')->equals('admin')
        ->field('active')->equals(1);

<a name="in"></a>

Query for articles that have some tags:

    [php]
    $query = $dm->createQuery('Article')
        ->field('tags.name')->in(array('tag1', 'tag2'));

Read more about the [$in operator](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24in) in the Mongo docs

<a name="notIn"></a>

Query for articles that do not have some tags:

    [php]
    $query = $dm->createQuery('Article')
        ->field('tags.name')->notIn(array('tag3'));

Read more about the [$nin operator](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24nin) in the Mongo docs.

<a name="notEqual"></a>

    [php]
    $query = $dm->createQuery('User')
        ->field('type')->notEqual('admin');

Read more about the [$ne operator](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24ne) in the Mongo docs.

<a name="greaterThan"></a>

Query for accounts with an amount due greater than 30:

    [php]
    $query = $dm->createQuery('Account')
        ->field('amount_due')->greaterThan(30);

<a name="greaterThanOrEq"></a>

Query for accounts with an amount due greater than or equal to 30:

    [php]
    $query = $dm->createQuery('Account')
        ->field('amount_due')->greaterThanOrEq(30);

<a name="lessThan"></a>

Query for accounts with an amount due less than 30:

    [php]
    $query = $dm->createQuery('Account')
        ->field('amount_due')->lessThan(30);

<a name="lessThanOrEq"></a>

Query for accounts with an amount due less than or equal to 30:

    [php]
    $query = $dm->createQuery('Account')
        ->field('amount_due')->lessThanOrEq(30);

<a name="range"></a>

Query for accounts with an amount due between 10 and 20:

    [php]
    $query = $dm->createQuery('Account')
        ->field('amount_due')->range(10, 20);

Read more about [conditional operators](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperators%3A%3C%2C%3C%3D%2C%3E%2C%3E%3D) in the Mongo docs.

<a name="size"></a>

Query for articles with no comments:

    [php]
    $query = $dm->createQuery('Article')
        ->field('comments')->size(0);

Read more about the [$size operator](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24size) in the Mongo docs.

<a name="exists"></a>

Query for users that have a login field before it was renamed to username:

    [php]
    $query = $dm->createQuery('User')
        ->field('login')->exists();

Read more about the [$exists operator](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24exists) in the Mongo docs.

<a name="type"></a>

Query for users that have a type field that is of integer bson type:

    [php]
    $query = $dm->createQuery('User')
        ->field('type')->type('integer');

Read more about the [$type operator](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24type) in the Mongo docs.

<a name="all"></a>

Query for users that are in all the specified Groups:

    [php]
    $query = $dm->createQuery('User')
        ->field('groups')->all(array('Group 1', 'Group 2'));

Read more about the [$all operator](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24all) in the Mongo docs.

<a name="mod"></a>

    [php]
    $query = $dm->createQuery('Transaction')
        ->field('field')->mod('field', array(10, 1));

Read more about the [$mod operator](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-ConditionalOperator%3A%24mod) in the Mongo docs.

++ Update Queries

<a name="update"></a>

Doctrine also supports executing atomic update queries using the `Query` object.
You can use the conditional operations in combination with the ability to change
document field values atomically.

You have several modifier operations available to you that make it easy to update
documents in Mongo:

* [set($name, $value, $atomic = true)](#set)
* [setNewObj($newObj)](#setNewObj)
* [inc($name, $value)](#inc)
* [unsetField($field)](#unsetField)
* [push($field, $value)](#push)
* [pushAll($field, array $valueArray)](#pushAll)
* [addToSet($field, $value)](#addToSet)
* [addManyToSet($field, array $values)](#addManyToSet)
* [popFirst($field)](#popFirst)
* [popLast($field)](#popLast)
* [pull($field, $value)](#pull)
* [pullAll($field, array $valueArray)](#pullAll)

++ Modifier Operations

<a name="set"></a>

Change a users password:

    [php]
    $dm->createQuery('User')
        ->field('password')->set('newpassword')
        ->field('username')->equals('jwage')
        ->execute();

If you want to just set the values of an entirely new object you can do so by
passing false as the third argument of `set()` to tell it the update is not an
atomic one:

    [php]
    $dm->createQuery('User')
        ->field('username')->set('jwage', false)
        ->field('password')->set('password', false)
        // ... set other remaining fields
        ->field('username')->equals('jwage')
        ->execute();

Read more about the [$set modifier](http://www.mongodb.org/display/DOCS/Updating#Updating-%24set) in the Mongo docs.

<a name="setNewObj"></a>

You can set an entirely new object to update as well:

    [php]
    $dm->createQuery('User')
        ->setNewObj(array(
            'username' => 'jwage',
            'password' => 'password',
            // ... other fields
        ))
        ->field('username')->equals('jwage')
        ->execute();

<a name="inc"></a>

Increment the value of a document:

    [php]
    $dm->createQuery('Package')
        ->field('id')->equals('theid')
        ->field('downloads')->inc(1)
        ->execute();

Read more about the [$inc modifier](http://www.mongodb.org/display/DOCS/Updating#Updating-%24inc) in the Mongo docs.

<a name="unsetField"></a>

Unset the login field from users where the login field still exists:

    [php]
    $dm->createQuery('User')
        ->field('login')->unsetField()->exists()
        ->execute();

Read more about the [$unset modifier](http://www.mongodb.org/display/DOCS/Updating#Updating-%24unset) in the Mongo docs.

<a name="push"></a>

Append new tag to the tags array:

    [php]
    $dm->createQuery('Article')
        ->field('tags')->push('tag5')
        ->field('id')->equals('theid')
        ->execute();

Read more about the [$push modifier](http://www.mongodb.org/display/DOCS/Updating#Updating-%24push) in the Mongo docs.

<a name="pushAll"></a>

Append new tags to the tags array:

    [php]
    $dm->createQuery('Article')
        ->field('tags')->pushAll(array('tag6', 'tag7'))
        ->field('id')->equals('theid')
        ->execute();

Read more about the [$pushAll modifier](http://www.mongodb.org/display/DOCS/Updating#Updating-%24pushAll) in the Mongo docs.

<a name="addToSet"></a>

Add value to array only if its not in the array already:

    [php]
    $dm->createQuery('Article')
        ->field('tags')->addToSet('tag1')
        ->field('id')->equals('theid')
        ->execute();

Read more about the [$addToSet modifier](http://www.mongodb.org/display/DOCS/Updating#Updating-%24addToSet) in the Mongo docs.

<a name="addManyToSet"></a>

Add many values to the array only if they do not exist in the array already:

    [php]
    $dm->createQuery('Article')
        ->field('tags')->addManyToSet(array('tag6', 'tag7'))
        ->field('id')->equals('theid')
        ->execute();

Read more about the [$addManyToSet modifier](http://www.mongodb.org/display/DOCS/Updating#Updating-%24addManyToSet) in the Mongo docs.

<a name="popFirst"></a>

Remove first element in an array:

    [php]
    $dm->createQuery('Article')
        ->field('tags')->popFirst()
        ->field('id')->equals('theid')
        ->execute();

<a name="popLast"></a>

Remove last element in an array:

    [php]
    $dm->createQuery('Article')
        ->field('tags')->popLast()
        ->field('id')->equals('theid')
        ->execute();

Read more about the [$pop modifier](http://www.mongodb.org/display/DOCS/Updating#Updating-%24pop) in the Mongo docs.

<a name="pull"></a>

Remove all occurrences of value from array:

    [php]
    $dm->createQuery('Article')
        ->field('tags')->pull('tag1')
        ->execute();

Read more about the [$pull modifier](http://www.mongodb.org/display/DOCS/Updating#Updating-%24pull) in the Mongo docs.

<a name="pullAll"></a>

    [php]
    $dm->createQuery('Article')
        ->field('tags')->pullAll(array('tag1', 'tag2'))
        ->execute();

Read more about the [$pullAll modifier](http://www.mongodb.org/display/DOCS/Updating#Updating-%24pullAll) in the Mongo docs.

++ Remove Queries

<a name="remove"></a>

In addition to updating you can also issue queries to remove documents from a 
collection. It works pretty much the same way as everything else and you can
use the conditional operations to specify which documents you want to remove.

Here is an example where we remove users who have never logged in:

    [php]
    $dm->createQuery('User')
        ->remove()
        ->field('num_logins')->equals(0)
        ->execute();

++ Group Queries

<a name="group"></a>

The last type of supported query is a group query. It performs an operation
similar to SQL's GROUP BY command.

    [php]
    $result = $this->dm->createQuery('Documents\User')
        ->group(array(), array('count' => 0))
        ->reduce('function (obj, prev) { prev.count++; }')
        ->field('a')->greaterThan(1)
        ->execute();

This is the same as if we were to do the group with the raw PHP code:

    [php]
    $reduce = 'function (obj, prev) { prev.count++; }';
    $condition = array('a' => array( '$gt' => 1));
    $result = $collection->group(array(), array('count' => 0), $reduce, $condition);