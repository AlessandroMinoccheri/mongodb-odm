This chapter explains the basic mapping of objects and properties. Mapping of
references and embedded documents will be covered in the next chapter "Reference Mapping".

++ Mapping Drivers

Doctrine provides several different ways for specifying object document mapping metadata:

* Docblock Annotations
* XML
* YAML

This manual usually uses docblock annotations in all the examples that are spread
throughout all chapters. There are dedicated chapters for XML and YAML mapping, respectively.

> **NOTE**
> If you're wondering which mapping driver gives the best performance, the answer is:
> None. Once the metadata of a class has been read from the source (annotations, xml or
> yaml) it is stored in an instance of the `Doctrine\ODM\MongoDB\Mapping\ClassMetadata` class
> and these instances are stored in the metadata cache. Therefore at the end of the day
> all drivers perform equally well. If you're not using a metadata cache (not
> recommended!) then the XML driver might have a slight edge in performance due to the
> powerful native XML support in PHP.

++ Introduction to Docblock Annotations

You've probably used docblock annotations in some form already, most likely to
provide documentation metadata for a tool like `PHPDocumentor` (@author, @link, ...).
Docblock annotations are a tool to embed metadata inside the documentation section
which can then be processed by some tool. Doctrine generalizes the concept of
docblock annotations so that they can be used for any kind of metadata and so
that it is easy to define new docblock annotations. In order to allow more involved
annotation values and to reduce the chances of clashes with other docblock annotations,
the Doctrine docblock annotations feature an alternative syntax that is heavily
inspired by the Annotation syntax introduced in Java 5.

The implementation of these enhanced docblock annotations is located in the
`Doctrine\Common\Annotations` namespace and therefore part of the Common package.
Doctrine docblock annotations support namespaces and nested annotations among
other things. The Doctrine MongoDB ODM defines its own set of docblock annotations for
supplying object document mapping metadata.

> **NOTE**
> If you're not comfortable with the concept of docblock annotations, don't worry, as
> mentioned earlier Doctrine 2 provides XML and YAML alternatives and you could easily
> implement your own favorite mechanism for defining ORM metadata.

++ Persistent classes

In order to mark a class for object-relational persistence it needs to be
designated as an document. This can be done through the `@Document` marker annotation.

    [php]
    /** @Document */
    class MyPersistentClass
    {
        //...
    }
    
By default, the document will be persisted to a database named doctrine and a
collection with the same name as the class name. In order to change that, you
can use the `db` and `collection` option as follows:

    [php]
    /**
     * @Document(db="my_db", collection="my_persistent_class")
     */
    class MyPersistentClass
    {
        //...
    }
    
Now instances of MyPersistentClass will be persisted into a collection named `my_persistent_class`.

++ Doctrine Mapping Types

A Doctrine Mapping Type defines the mapping between a PHP type and an MongoDB type.
You can even write your own custom mapping types.

Here is a quick overview of the built-in mapping types:

* `bin_data_custom`
* `bin_data_func`
* `bin_data_md5`
* `bin_data`
* `bin_data_uuid`
* `boolean`
* `date`
* `file`
* `float`
* `hash`
* `id`
* `int`
* `key`
* `string`
* `timestamp`
* `increment`

You can read more about the available MongoDB types on
[php.net](http://us.php.net/manual/en/mongo.types.php).

> **NOTE**
> Doctrine Mapping Types are NOT MONGO types and NOT PHP types! They are mapping types
> between 2 types.

++ Property Mapping

After a class has been marked as an document it can specify mappings for its
instance fields. Here we will only look at simple fields that hold scalar values
like strings, numbers, etc. References to other objects and embedded objects
are covered in the chapter "Reference Mapping".

To mark a property for document persistence the `@Field` docblock annotation
can be used. This annotation usually requires at least 1 attribute to be set, the `type`.
The `type` attribute specifies the Doctrine Mapping Type to use for the field.
If the type is not specified, 'string' is used as the default mapping type since
it is the most flexible.

Example:
    
    [php]
    /** @Document */
    class MyPersistentClass
    {
        /** @Id */
        private $id;

        /** @Field */
        private $name; // type defaults to string
        //...
    }

In that example we mapped the property `id` to the field `id` using the mapping
type `id` and the property `name` is mapped to the field `name` with the default
mapping type `string`. As you can see, by default the mongo field names are
assumed to be the same as the property names. To specify a different name for
the field, you can use the `name` attribute of the Field annotation as follows:

    [php]
    /** @Field(name="db_name") */
    private $name;

++ Custom Mapping Types

Doctrine allows you to create new mapping types. This can come in handy when
you're missing a specific mapping type or when you want to replace the existing
implementation of a mapping type.

In order to create a new mapping type you need to subclass `Doctrine\ODM\MongoDB\Mapping\Types\Type` and implement/override
the methods. Here is an example skeleton of such a custom type class:

    [php]
    namespace My\Project\Types;

    use Doctrine\DBAL\Types\Type;
    use Doctrine\DBAL\Platforms\AbstractPlatform;

    /**
     * My custom datatype.
     */
    class MyType extends Type
    {
        public function convertToPHPValue($value)
        {
            // This is executed when the value is read from the database. Make your conversions here.
        }

        public function convertToDatabaseValue($value)
        {
            // This is executed when the value is written to the database. Make your conversions here.
        }
    }

Restrictions to keep in mind:

* If the value of the field is *NULL* the method `convertToDatabaseValue()` is not called.
* The `UnitOfWork` never passes values to the database convert method that did not change in the request.
    
When you have implemented the type you still need to let Doctrine know about it. This can be achieved
through the `Doctrine\ODM\MongoDB\Mapping\Types#registerType($name, $class)` method.

Here is an example:

    [php]
    // in bootstrapping code

    // ...
    
    use Doctrine\ODM\MongoDB\Types\Type;
    
    // ...

    // Register my type
    Type::addType('mytype', 'My\Project\Types\MyType');
    
As can be seen above, when registering the custom types in the configuration
you specify a unique name for the mapping type and map that to the corresponding
fully qualified class name. Now you can use your new type in your mapping like this:

    [php]
    class MyPersistentClass
    {
        /** @Field(type="mytype") */
        private $field;
    }

++ Identifiers

Every document class needs an identifier. You designate the field that serves
as the identifier with the `@Id` marker annotation. Here is an example:

    [php]
    /** @Document */
    class MyPersistentClass
    {
        /** @Id */
        private $id;
        //...
    }

++ Multiple Document Types in a Collection

You can easily store multiple types of documents in a single collection. It only requires
that you specify a `discriminatorMap` for each document in the collection. Here is an
example:

    [php]
    /**
     * @Document(collection="my_documents")
     * @DiscriminatorField(fieldName="type")
     * @DiscriminatorMap({"article"="Article", "album"="Album"})
     */
    class Article
    {
        // ...
    }

    /**
     * @Document(collection="my_documents")
     * @DiscriminatorField(fieldName="type")
     * @DiscriminatorMap({"article"="Article", "album"="Album"})
     */
    class Album
    {
        // ...
    }

All instances of `Article` and `Album` will be stored in the `my_documents` collection.
You can query for the documents just like you normally would and if you want to and the
results will automatically be limited for you based on the discriminator map.

If you wish to query for multiple types of documents from the collection you can simply
pass an array of document class names:

    [php]
    $documents = $dm->find(array('Article', 'Album'));

The above will return a `MongoCursor` that will allow you to iterate over all `Article`
and `Album` instances!

You can also create queries in the same way:

    [php]
    $query = $dm->createQuery(array('Article', 'Album'));
    $documents = $query->execute();