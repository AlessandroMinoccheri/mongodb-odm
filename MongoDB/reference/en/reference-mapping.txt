This chapter explains how references between documents are mapped with Doctrine.

++ Collections

In all the examples of many-valued references in this manual we will make use
of a `Collection` interface and a corresponding default implementation
`ArrayCollection` that are defined in the `Doctrine\Common\Collections` namespace.
Why do we need that? Doesn't that couple my domain model to Doctrine? Unfortunately,
PHP arrays, while being great for many things, do not make up for good collections
of business objects, especially not in the context of an ODM. The reason is that
plain PHP arrays can not be transparently extended / instrumented in PHP code,
which is necessary for a lot of advanced ODM features. The classes / interfaces
that come closest to an OO collection are ArrayAccess and ArrayObject but until
instances of these types can be used in all places where a plain array can be
used (something that may happen in PHP6) their usability is fairly limited.
You "can" type-hint on `ArrayAccess` instead of `Collection`, since the Collection
interface extends `ArrayAccess`, but this will severely limit you in the way you
can work with the collection, because the `ArrayAccess` API is (intentionally)
very primitive and more importantly because you can not pass this collection to
all the useful PHP array functions, which makes it very hard to work with.

> **CAUTION**
> The Collection interface and ArrayCollection class, like everything else in the
> Doctrine\Common namespace, are neither part of the ODM, it is a plain PHP
> class that has no outside dependencies apart from dependencies on PHP itself (and the
> SPL). Therefore using this class in your domain classes and elsewhere does not introduce
> a coupling to the persistence layer. The Collection class, like everything else in the
> Common namespace, is not part of the persistence layer. You could even copy that class
> over to your project if you want to remove Doctrine from your project and all your
> domain classes will work the same as before.

++ Reference One

Reference one document:

    [php]
    /** @Document */
    class Product
    {
        // ...

        /**
         * @ReferenceOne(targetDocument="Shipping")
         */
        private $shipping;

        // ...
    }
    
    /** @Document */
    class Shipping
    {
        // ...
    }
    
++ Reference Many

Reference many documents:

    [php]
    /** @Document */
    class User
    {
        // ...

        /**
         * @ReferenceMany(targetDocument="Phonenumber")
         */
        private $phonenumbers = array();

        // ...
    }

    /** @Document */
    class Phonenumber
    {
        // ...
    }