The Doctrine MongoDB Object Document Mapper fully supports the map reduce
functionality and improves the user friendliness of it as well.

> **SIDEBAR**
> From MongoDB.org:
>
> Map/reduce in MongoDB is useful for batch manipulation of data and aggregation
> operations. It is similar in spirit to using something like Hadoop with all
> input coming from a collection and output going to a collection. Often, in a
> situation where you would have used GROUP BY in SQL, map/reduce is the right
> tool in MongoDB.

Imagine a situation where you had an application with a document named `Event`:

    [php]
    namespace Documents;

    /** @Document */
    class Event
    {
        /** @Id */
        private $id;

        /** @ReferenceOne(targetDocument="Documents\User") */
        private $user;

        /** @String */
        private $type;

        /** @Date */
        private $date;

        /** @String */
        private $description;

        // getters and setters
    }

    /** @Document */
    class User
    {
        // ...
    }

Now you want to figure out how many sales each user had:

    [php]
    $query = $dm->createQuery('Documents\User')
        ->where('type', 'sale')
        ->map('function() { emit(this.user.$id, 1); }')
        ->reduce("function(k, vals) {
            var sum = 0;
            for (var i in vals) {
                sum += vals[i]; 
            }
            return sum;
        }");

    $users = $query->getCursor();
    foreach ($users as $user) {
        echo "{$user['_id']} had {$user['value']} sale(s).\n";
    }

When using map reduce, the results are not hydrated into objects and the raw
results are returned from MongoDB.