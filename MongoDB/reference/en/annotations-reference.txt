In this chapter a reference of every Doctrine 2 ODM Annotation is given with short explanations on their context and usage.

++ Index

* [@Bin](#ann_bin)
* [@BinCustom](#ann_bin_custom)
* [@BinFunc](#ann_bin_func)
* [@BinMD5](#ann_bin_md5)
* [@BinUUID](#ann_bin_uuid)
* [@Boolean](#ann_boolean)
* [@Date](#ann_date)
* [@Document](#ann_document)
* [@DiscriminatorField](#ann_discriminator_field)
* [@DiscriminatorMap](#ann_discriminator_map)
* [@EmbedMany](#ann_embed_many)
* [@EmbedOne](#ann_embed_one)
* [@EmbeddedDocument](#ann_embedded_document)
* [@Field](#ann_field)
* [@Increment](#ann_increment)
* [@File](#ann_file)
* [@Float](#ann_float)
* [@Hash](#ann_hash)
* [@HasLifecycleCallbacks](#ann_has_lifecycle_callbacks)
* [@Id](#ann_id)
* [@Index](#ann_index)
* [@Inheritance](#ann_inheritance)
* [@InheritanceType](#ann_inheritance_type)
* [@Int](#ann_int)
* [@Key](#ann_key)
* [@MappedSuperclass](#ann_mapped_superclass)
* [@PostLoad](#ann_post_load)
* [@PostPersist](#ann_post_persist)
* [@PostRemove](#ann_post_remove)
* [@PostUpdate](#ann_post_update)
* [@PrePersist](#ann_pre_persist)
* [@PreRemove](#ann_pre_remove)
* [@PreUpdate](#ann_pre_update)
* [@ReferenceOne](#ann_reference_one)
* [@ReferenceMany](#ann_reference_many)
* [@String](#ann_string)
* [@Timestamp](#ann_timestamp)

++ Reference

<a name="ann_bin"></a>
+++ @Bin

Alias of [@Field](#ann_field), with "type" attribute set to "bin".
Converts value to [MongoBinData](http://www.php.net/manual/en/class.mongobindata.php), using MongoBinData::BYTE_ARRAY type.

<a name="ann_bin_custom"></a>
+++ @BinCustom

Alias of [@Field](#ann_field), with "type" attribute set to "bin_custom".
Converts value to [MongoBinData](http://www.php.net/manual/en/class.mongobindata.php), using MongoBinData::CUSTOM type.

<a name="ann_bin_func"></a>
+++ @BinFunc

Alias of [@Field](#ann_field), with "type" attribute set to "bin_func".
Converts value to [MongoBinData](http://www.php.net/manual/en/class.mongobindata.php), using MongoBinData::FUNC type.

<a name="ann_bin_md5"></a>
+++ @BinMD5

Alias of [@Field](#ann_field), with "type" attribute set to "bin_md5".
Converts value to [MongoBinData](http://www.php.net/manual/en/class.mongobindata.php), using MongoBinData::MD5 type.

<a name="ann_bin_uuid"></a>
+++ @BinUUID

Alias of [@Field](#ann_field), with "type" attribute set to "bin_uuid".
Converts value to [MongoBinData](http://www.php.net/manual/en/class.mongobindata.php), using MongoBinData::UUID type.

<a name="ann_boolean"></a>
+++ @Boolean

Alias of [@Field](#ann_field), with "type" attribute set to "boolean"

<a name="ann_date"></a>
+++ @Date

Alias of [@Field](#ann_field), with "type" attribute set to "date"
Converts value to [MongoDate](http://www.php.net/manual/en/class.mongodate.php).

<a name="ann_discriminator_field"></a>
+++ @DiscriminatorField

This annotation is a required annotation for the topmost/super class of an inheritance hierachy. It specifies
the details of the field which saves the name of the class, which the document is actually instantiated as.

Required attributes:

* fieldName - The field name of the discriminator. This name is also used during Array hydration as key to specify the class-name.

<a name="ann_discriminator_map"></a>
+++ @DiscriminatorMap

The discrimnator map is a required annotation on the top-most/super class in an inheritance hierachy. It takes
an array as only argument which defines which class should be saved under which name in the database. Keys
are the database value and values are the classes, either as fully- or as unqualified class names depending
if the classes are in the namespace or not.

    [php]
    /**
     * @Document
     * @InheritanceType("SINGLE_COLLECTION")
     * @DiscriminatorField(fieldName="discr")
     * @DiscriminatorMap({"person" = "Person", "employee" = "Employee"})
     */
    class Person
    {
        /**
         * @Field(type="string")
         */
        private $discr;
        // ...
    }

<a name="ann_document"></a>
+++ @Document

Required annotation to mark a PHP class as Document. Doctrine ODM manages the persistence of all classes marked as document.

Optional attributes:

* db - Document Manager uses the default mongo db database, unless it has database name to use set, this value can be specified to override database to use on per document basis.
* collection - By default collection name is extracted from the document's class name, but this attribute can be used to override.
* repositoryClass - Specifies custom repository class to use when .

Example:

    [php]
    /**
     * @Document(db="documents", collection="users", repositoryClass="MyProject\UserRepository")
     */
    class User
    {
        //...
    }

<a name="ann_embed_many"></a>
+++ @EmbedMany

This annotation is simmilar to [@EmbedOne](#ann_embed_one), but instead of embedding one document, it informs MongoDB to embed a collection of documents

Required attributes:

* targetDocument - A full class name of the target document.

<a name="ann_embed_one"></a>
+++ @EmbedOne

The @EmbedOne annotation works almost exactly as the [@ReferenceOne](#ann_reference_one), except that internally,
the document is embedded in the parent document in MongoDB. From MongoDB docs:

> The key question in Mongo schema design is "does this object merit its own collection, or rather should it embed in objects in other collections?" In relational databases, each sub-item of interest typically becomes a separate table (unless denormalizing for performance). In Mongo, this is not recommended - embedding objects is much more efficient. Data is then colocated on disk; client-server turnarounds to the database are eliminated. So in general the question to ask is, "why would I not want to embed this object?"

Required attributes:

* targetDocument - A full class name of the target document.

<a name="ann_embedded_document"></a>
+++ @EmbeddedDocument

Marks the document as embeddable. Without this annotation, you cannot embed non-document objects.

    [php]
    class Money
    {
        /**
         * @Float
         */
        protected $amount
        
        public function __construct($amount)
        {
            $this->amount = (float) $amount;
        }
        //...
    }
    
    /**
     * @Document(db="finance", collection="wallets")
     */
    class Wallet
    {
        /**
         * @EmbedOne(targetDocument="Money")
         */
        protected $money;
        
        public function setMoney(Money $money)
        {
            $this->money = $money;
        }
        //...
    }
    //...
    $wallet = new Wallet();
    $wallet->setMoney(new Money(34.39));
    $dm->persist($wallet);
    $dm->flush();

The code above wouldn't store the money object.
In order for the above code to work, you should have:

    [php]
    <?php
    /**
     * @Document
     */
    class Money
    {
    //...
    }

or

    [php]
    /**
     * @EmbeddedDocument
     */
    class Money
    {
    //...
    }

The difference is that @EmbeddedDocument cannot be stored without a parent @Document and cannot specify its own db or collection attributes.

<a name="ann_field"></a>
+++ @Field

Marks an annotated instance variable as "persistent". It has to be inside the instance variables PHP DocBlock comment.
Any value hold inside this variable will be saved to and loaded from the document store as part of the lifecycle of the instance variables document-class.

Required attributes:

* type - Name of the Doctrine ODM Type which is converted between PHP and Database representation. Can be one of: string, boolean, int, float, hash, date, key, timestamp, bin, bin_func, bin_uuid, bin_md5, bin_custom

Optional attributes:

* name - By default the property name is used for the mongodb field name also, however the 'name' attribute allows you to specify the field name.

Examples:

    [php]
    /**
     * @Field(type="string")
     */
    protected $username;

    /**
     * @Field(type="string" name="origin")
     */
    protected $country;

    /**
     * @Column(type="float")
     */
    protected $height;

<a name="ann_increment"></a>
+++ @Increment

The increment type is just like a normal field except that when you update, it will
use the `$inc` operator instead of `$set`:

    [php]
    class Package
    {
        // ...

        /** @Increment */
        protected $downloads = 0;

        public function incrementDownloads()
        {
            $this->downloads++;
        }

        // ...
    }

Now update a Package instance like the following:

    [php]
    $package->incrementDownloads();
    $dm->flush();

The query sent to Mongo would be something like the following:

    array(
        '$inc' => array(
            'downloads' => 1
        )
    )

It will increment the value by the difference between the new value and the old
value.

<a name="ann_file"></a>
+++ @File

Tells ODM that the property is a file, must be set to a existing file path before saving to MongoDB
Will be instantiated as instance of [MongoGridFSFile](http://www.php.net/manual/en/class.mongogridfsfile.php) class upon retreival

<a name="ann_float"></a>
+++ @Float

Alias of [@Field](#ann_field), with "type" attribute set to "float"

<a name="ann_has_lifecycle_callbacks"></a>
+++ @HasLifecycleCallbacks

Annotation which has to be set on the document-class PHP DocBlock to notify Doctrine that this document has document life-cycle
callback annotations set on at least one of its methods. Using @PostLoad, @PrePersist, @PostPersist, @PreRemove, @PostRemove,
@PreUpdate or @PostUpdate without this marker annotation will make Doctrine ignore the callbacks.

Example:

    [php]
    /**
     * @Document
     * @HasLifecycleCallbacks
     */
    class User
    {
        /**
         * @PostPersist
         */
        public function sendOptinMail() {}
    }

<a name="ann_hash"></a>
+++ @Hash

Alias of [@Field](#ann_field), with "type" attribute set to "hash".
Stores and retrieves the value as array.

<a name="ann_id"></a>
+++ @Id

The annotated instance variable will be marked as document identifier.
This annotation is a marker only and has no required or optional attributes.

Example:

    [php]
    /**
     * @Document
     */
    class User
    {
        /**
         * @Id
         */
        protected $id;
    }

<a name="ann_index"></a>
+++ @Index

Annotation is used inside the [@Document](#ann_document) annotation on the class level. It allows to hint the
MongoDB to generate a database index on the specified document fields.

Required attributes:

* keys - Fields to index
* options - Array of MongoCollection options.

Example:

    [php]
    /**
     * @Document(
     *   db="my_database",
     *   collection="users",
     *   indexes={
     *     @Index(keys={"username"="desc"}, options={"unique"=true})
     *   }
     * )
     */
    class User
    {
        //...
    }

<a name="ann_int"></a>
+++ @Int

Alias of [@Field](#ann_field), with "type" attribute set to "int"

<a name="ann_inheritance_type"></a>
+++ @InheritanceType

In an inheritance hierachy you have to use this annotation on the topmost/super class to define which
strategy should be used for inheritance. Currently SINGLE_COLLECTION and COLLECTION_PER_CLASS are supported.

This annotation has always been used in conjunction with the [@DiscriminatorMap](#ann_discriminator_map) and
[@DiscriminatorField](#ann_discriminator_field) annotations.

Examples:

    [php]
    /**
     * @Document
     * @InheritanceType("COLLECTION_PER_CLASS")
     * @DiscriminatorMap({"person"="Person", "employee"="Employee"})
     */
    class Person
    {
        // ...
    }

    /**
     * @Document
     * @InheritanceType("SINGLE_COLLECTION")
     * @DiscriminatorMap({"person"="Person", "employee"="Employee"})
     */
    class Person
    {
        // ...
    }

<a name="ann_key"></a>
+++ @Key

Alias of [@Field](#ann_field), with "type" attribute set to "key"
It is then converted to [MongoMaxKey](http://www.php.net/manual/en/class.mongomaxkey.php) or
[MongoMinKey](http://www.php.net/manual/en/class.mongominkey.php), if the value evaluates to true or false respectively.

<a name="ann_mapped_superclass"></a>
+++ @MappedSuperclass

The annotation is used to specify classes that are parents of document classes and should not be managed [read more at](http://www.doctrine-project.org/projects/mongodb_odm/1.0/docs/reference/inheritance/en)

<a name="ann_post_load"></a>
+++ @PostLoad

Marks a method on the document to be called as a @PostLoad event. Only works with @HasLifecycleCallbacks in the document class PHP DocBlock.

<a name="ann_post_persist"></a>
+++ @PostPersist

Marks a method on the document to be called as a @PostPersist event. Only works with @HasLifecycleCallbacks in the document class PHP DocBlock.

<a name="ann_post_remove"></a>
+++ @PostRemove

Marks a method on the document to be called as a @PostRemove event. Only works with @HasLifecycleCallbacks in the document class PHP DocBlock.

<a name="ann_post_update"></a>
+++ @PostUpdate

Marks a method on the document to be called as a @PostUpdate event. Only works with @HasLifecycleCallbacks in the document class PHP DocBlock.

<a name="ann_pre_persist"></a>
+++ @PrePersist

Marks a method on the document to be called as a @PrePersist event. Only works with @HasLifecycleCallbacks in the document class PHP DocBlock.

<a name="ann_preremove"></a>
+++ @PreRemove

Marks a method on the document to be called as a @PreRemove event. Only works with @HasLifecycleCallbacks in the document class PHP DocBlock.

<a name="ann_preupdate"></a>
+++ @PreUpdate

Marks a method on the document to be called as a @PreUpdate event. Only works with @HasLifecycleCallbacks in the document class PHP DocBlock.

<a name="ann_reference_many"></a>
+++ @ReferenceMany

Defines that the annotated instance variable holds a collection of related documents.

Required attributes:

* targetDocument - A full class name of the target document.

Optional attributes:

* cascade - Cascade Option

Example:

    [php]
    /**
     * @ReferenceMany(targetDocument="Documents\PhoneNumber", cascade="all")
     */
    private $phones;

<a name="ann_reference_one"></a>
+++ @ReferenceOne

Defines an instance variable holds a related document instance.

Required attributes:

* targetDocument - A full class name of the target document.

Optional attributes:

* cascade - Cascade Option

Example:

    [php]
    /**
     * @ReferenceOne(targetDocument="Documents\ShoppingCart", cascade="all")
     */
    private $cart;

